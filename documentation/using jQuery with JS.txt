This is some information taking from a tutorial on codeacademy.com, titled, "interactive website".

first of all to understand a littly bit about jQuery and what the $() funtion is for go to: http://api.jquery.com/jquery/


what jQuery is in my own words.
jQuery is an API for javascript. it can be used to get elements from a web page and store them as objects inside of your javascript code.
jQuery includes a library of funtions and methods that can be used to make common uses for javascript faster and easier.

according to the internet:
jQuery is a fast, small, and feature-rich JavaScript library. 
It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use 
API that works across a multitude of browsers. http://jquery.com/

***************************************************************************************************
Title of section: Show a description

The news feed contains a list of articles. Each article has a source, title, publication date, and description. HTML is used to organize this data.
The article's source, title, and pubdate are stored inside <div class="item">..</div>.
The article's text is stored inside the <div class="description">..</div>.

when an article is clicked on the description will show.

var main = function() {
  $('.article').click(function() {
    $(this).children('.description').show();
  });
};

$(document).ready(main); // this line waits for the page to load before running the javascript file. http://api.jquery.com/ready/

In jQuery $(this) refers to the current element or object selected.
children() allows you to search through elements nested directly under the current element.
show() is jQuery's way of saying list or display these.



*****************************************************************************************************
Title of section: descriptions

When an article is clicked, a click event occurs. This runs the event handler, which shows the clicked article's description.
However, when you click on more articles in the newsfeed, all descriptions remain open.

now when a new article is clicked the current one that is open will close first.

var main = function(){
    $('.article').click(function() {
        $('.description').hide(); // this line refers to all descriptions and closes them.
        $(this).children('.description').show(); // this line refers to the description inside of the current click event and opens it.
    });
}

$(document).ready(main);



*********************************************************************************************************
Mark the current article

The description of the current article shows and all other descriptions hide.
To make more clear which article is currently open, let's add the class 'current' to it. 
This is a CSS class in style.css that will shade it gray to indicate it is open.

the css code looks like this:

.current .item {
  background: rgba(206,220,206,.9);
}

*** An RGBA color value is specified with: rgba(red, green, blue, alpha). ***
*** The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque). ***
#reference http://www.w3schools.com/cssref/css_colors_legal.asp

the js code:

var main = function(){
    $('.article').click(function() {
        $('.article').removeClass('current'); //if not 100% sure why the "." is not needed before current. refer to http://api.jquery.com/addclass/
        $('.description').hide();
        
        $(this).addClass('current');
        $(this).children('.description').show();
    });
}

$(document).ready(main);



***************************************************************************************************************
Keyboard shortcuts

Nice! Now when you click an article, it's shaded gray and its description opens up.
Next let's see how to add two keyboard shortcuts. Here's what we want:
When you press o, it will open the article.
When you press n, it will move on to the next article.
Step one is to write a keypress event handler.

Instructions:
Inside the main() function under your click event handler, create a keypress event handler:
Use jQuery to select document
Add a .keypress() method with a function inside. This function is called a keypress event handler.
The event handler should take event as a parameter.

var main = function(){
    $('.article').click(function() {
        $('.article').removeClass('current');
        $('.description').hide();
        
        $(this).addClass('current');
        $(this).children('.description').show();
    });
    
	// new event handler for key presses
    $(document).keypress(function(event){
           
    });
}

$(document).ready(main);



*****************************************************************************************************
The o shortcut
Keyboard keys are identified by key codes. The o key is identified by the key code 111.
We can use event.which contains which key was pressed. If event.which === 111, then we know the o key has been pressed.
If the o key is pressed, we should toggle the current article's description.

Instructions:
Inside the keypress event handler, write an if statement:
The if statement should check whether event.which === 111.
If it does, then toggle the current article's description using:
$('.current').children('.description').toggle();

var main = function(){
    $('.article').click(function() {
        $('.article').removeClass('current');
        $('.description').hide();
        
        $(this).addClass('current');
        $(this).children('.description').show();
    });
    
    $(document).keypress(function(event){
		// new code
        if(event.which === 111){
            $('.current').children('.description').toggle(); // see toggle() http://api.jquery.com/toggle/
        }
    });
}

$(document).ready(main);

It is important you click on the first article before pressing the o key!
The o key currently works for the first article's description. Let's add add another keyboard shortcut to move on to the next article.



**************************************************************************************************************
The n shortcut 1

Great job! Now when you click on an article it opens. When you press o, the description alternates opening and closing.
Let's make a keyboard shortcut for the n key which moves to the next article.
The n key is identified by the key code 110. In other words, if event.which === 110, then we know the n key has been pressed.

Instructions:
We're going to do the n shortcut over two exercises.
Inside the keypress event handler under the existing if statement:
a. Write an else if statement
b. The else if statement should check whether event.which === 110.

var main = function(){
    $('.article').click(function() {
        $('.article').removeClass('current');
        $('.description').hide();
        
        $(this).addClass('current');
        $(this).children('.description').show();
    });
    
    $(document).keypress(function(event){
        if(event.which === 111){
            $('.current').children('.description').toggle();
        }
        else if(event.which === 110){
               
        }
    });
}

$(document).ready(main);



*******************************************************************************************************
The n shortcut 2

When the n key is pressed, we want to move to the next article.

Instructions:
Inside the else if statement:
Select the current article using the '.current' selector. Save this in a new variable named currentArticle
Select the next article using currentArticle.next(). Save this in a new variable named nextArticle
Remove the 'current' class from currentArticle using .removeClass()
Add the 'current' class to nextArticle using .addClass()
Click on any article, and then press the n key to see your new shortcut!

var main = function(){
    $('.article').click(function() {
        $('.article').removeClass('current');
        $('.description').hide();
        
        $(this).addClass('current');
        $(this).children('.description').show();
    });
    
    $(document).keypress(function(event){
        if(event.which === 111){
            $('.current').children('.description').toggle();
        }
        else if(event.which === 110){
		// new code
            var currentArticle = $('.current');
            var nextArticle = currentArticle.next(); // see .next() http://api.jquery.com/next/
            
            currentArticle.removeClass('current');
            nextArticle.addClass('current');
            
        }
    });
}

$(document).ready(main);

End of tutorial

Begining of next tutorial:

$( )
In jQuery, we often see $( ). It has two main uses:

1. To select existing HTML elements on the page.
$('p') selects all p elements on the page.

2.To create new HTML elements to add to the page.
$('<h1>') creates a new h1 element. The < > indicates that we want to create a new HTML element.


.text()
The .text() method adds text to an HTML element.

$('<p>').text('List) | The $() creates a new '<p>' element and .text() sets its text to 'List'

$('li').text('Old Item') | The $() selects the 'li' elements and .text() replaces its text with 'Old Item'

$('h1').text() | The $() selects the 'h1' elements and .text() gets the text it contains


.appendTo()
The .appendTo() method adds HTML elements to the end of the selected element.

$('.btn').click(function() {
  $('<li>').text('New item').appendTo('.items');
});

The $() function creates a new li element.
Text is added to the new li element.
The li element is added as the last item inside <ul class="items"> .. </ul> on the page.


prependTo()
The .prependTo() method adds HTML elements to the beginning of the selected element.

$('.btn').click(function() {
  $('<li>').text('New item').prependTo('.items');
});

The $('<li>) function creates a new li element.

We use the < > to create a new element. 
Whereas $('li') is used to select existing li elements on the page, $('<li>') is used to create a new li element
Text is added to the new li element.
The li element is added as the first item inside <ul class="items"> .. </ul> on the page.


.remove()
The .remove() method removes the selected HTML element from the web page.

$('.btn').click(function() {
  $('.selected').remove();
});

When the Delete button is clicked, the .selected element is removed from the page.


Six jQuery Methods
These six jQuery methods let you control more aspects of HTML elements:

.hide() hides the selected HTML element
.show() displays an element
.toggle() alternates hiding and showing an element
.addClass() adds a CSS class to an element
.removeClass() removes a class from an element
.toggleClass() alternates adding and removing a class from an element

$('.social li').click(function() {
  $(this).toggleClass('active');
});

Notice where .toggleClass() is located. 
You can replace .toggleClass() with any of the five other methods. 
While each method creates different effects, their usage is similar.

Document Object Model
jQuery also comes with methods that let us select HTML elements in relation to other elements.
HTML elements are nested inside other elements, forming a hierarchy. This hierarchy can be visualized as a tree.
This representation of HTML is called the Document Object Model (DOM).

*** The following requires a picture to understand fully but here it is anyway ***

DOM Traversal
The DOM is useful to represent relationships between elements, similar to a family tree.

For example, look at the ul element:

The two li elements nested inside are its child elements
The .article element is its parent element
the h2 and p elements are its sibling elements
Here are three common jQuery methods that use these relationships to access and modify elements on the page.

The .next() method gets the next sibling of the selected element.
The .prev() method gets the previous sibling of the selected element.

.children()
The .children() method gets the children of the selected element.
If provided a selector, the .children() method can get a specific child.




***************************************************************************************************************
Preview

Let's use jQuery to build a status update box similar to update boxes used in Facebook and Twitter.
The file index.html contains the page structure and content
The file style.css has the styling for the page.

var main = function() {
  $('.btn').click(function() {
    var post = $('.status-box').val();
    $('<li>').text(post).prependTo('.posts');
    $('.status-box').val('');
    $('.counter').text('140');
    $('.btn').addClass('disabled'); 
  });
  
  $('.status-box').keyup(function() {
    var postLength = $(this).val().length;
    var charactersLeft = 140 - postLength;
    $('.counter').text(charactersLeft);
  
    if(charactersLeft < 0) {
      $('.btn').addClass('disabled'); 
    }
    else if(charactersLeft == 140) {
      $('.btn').addClass('disabled');
    }
    else {
      $('.btn').removeClass('disabled');
    }
  });
  
  $('.btn').addClass('disabled');
}

$(document).ready(main);



****************************************************************************************
Program skeleton

The index.html file has two script elements right before the closing </body> tag:
The first script loads jQuery.
The second script loads app.js. The file app.js is where we'll write out code for the status update tool.

Instructions:
Start by setting up the basic skeleton for JavaScript programs.
This involves creating a function called main and getting the document ready.

var main = function(){

};

$(document).ready(main);



*******************************************************************************************
Create a new post

Here's an overview of the HTML:
The status update box can be accessed using 'status-box' class
The Post button can be accessed using the 'btn' class
New status updates can be added to the <ul class="posts">..</ul> element
When a user types a message and clicks the Post button, the message should show up in the list of posts.

Instructions:
Access the Post button by selecting the 'btn' class.
Add a .click() method with a function inside. This function is called a click event handler.
Inside the event handler:

a. Create a variable named post. We want to store what is typed in the status-box in this variable. 
	How? Select the class status-box. Use .val() after status-box is selected. This .val() is like .text() but for form inputs.
b. Then use $( ) to create a new li element.
c. The li element doesn't have any text. Use .text(post) to add text to the element.
d. But this li element does not show up anywhere. Use .prependTo('.posts') to prepend it to the <ul class="posts">..</ul> element.

var main = function() {
  $('.btn').click(function() {
    var post = $('.status-box').val();
    $('<li>').text(post).prependTo('.posts');
  });
}

$(document).ready(main);




********************************************************************************************************
Clear out the status box

When you type a message and click Post, the message displays below.
However, the status box still contains the old message. We'll need to clear out the status box after we've posted a message.

Instructions:
Recall that $('.status-box').val() contained the content that was typed in the status box.
Under all code where you prepended the list element to '.posts', we need a line of code to clear out the status box.
To clear out the status box, use jQuery to select the 'status-box' class. Then set its value to empty by using .val('');.

var main = function(){
    $('.btn').click(function(){
        var post = $('.status-box').val();
        $('<li>').text(post).prependTo('.posts');
        $('.status-box').val(''); // clears the status box with an empty string (no space between '')
    });
};

$(document).ready(main);




**************************************************************************************************************
Count characters left

Next let's figure out how to display a count of the number of characters left:
As the user types, we want to count the number of characters in their message.
Then we want to subtract this string length from 140 to find the number of characters left in the message.
Finally we want to update the '.counter' with this number to show how many characters are left.

Instructions:
1. Outside the click event handler, select the 'status-box' class
2. Add a .keyup() method with a function inside. The .keyup() is similar to .keypress(). Therefore, this function is called a keyup event handler.
3. Inside the event handler:

	a. Create a variable named postLength . In this variable, we want to store the length of the message typed in the status box. 
	   Use $(this), .val(), and .length
	b. Create a variable named charactersLeft and set it equal to 140 minus postLength
	c. Update the '.counter' to show how many characters are left. Select the 'counter' class and use .text() to update its text with charactersLeft

var main = function(){
    $('.btn').click(function(){
        var post = $('.status-box').val();
        $('<li>').text(post).prependTo('.posts');
        $('.status-box').val('');
    });
    
    $('.status-box').keyup(function(){
        var postLength = $(this).val().length;
        var charactersLeft = 140 - postLength;
        $('.counter').text(charactersLeft);
    });
};

$(document).ready(main);



*****************************************************************************************************************************
Reset the counter

Now as you type a message, the number of characters left displays below.
However, when you click Post, the counter still contains the old number of characters left.

Instructions:
We want to reset the counter text to "140" after the Post button is clicked.
To do this, add a line at the end of your click event handler where you:
Use jQuery to select the CSS class 'counter'
Replace its text with "140" using .text()

var main = function(){
    $('.btn').click(function(){
        var post = $('.status-box').val();
        $('<li>').text(post).prependTo('.posts');
        $('.status-box').val('');
        $('.counter').text(140);
    });
    
    $('.status-box').keyup(function(){
        var postLength = $(this).val().length;
        var charactersLeft = 140 - postLength;
        $('.counter').text(charactersLeft);
    });
};

$(document).ready(main);

*********************************************************************************************************************************
Disable the button 1

The Post button should only work for messages that are 140 characters or less.
The button should be disabled to prevent longer messages or empty messages.
We want logic to handle three situations.
If there are 0 or fewer characters remaining, the message is too long.
Else if there are 140 characters remaining, the message is empty,
Else we should enable the button.

Instructions:
At the end of keyup event handler, add an if...else statement.
Write an if statement that checks whether charactersLeft is less than 0. 
If it is, select the CSS class 'btn' and add the class 'disabled' using .addClass()
Write an else if statement that checks whether charactersLeft is equal to 140. 
If it is, select the 'btn' class and add the class 'disabled' using .addClass()
Write an else statement that selects the 'btn' class and removes the class 'disabled' using .removeClass()
Lastly, let's disable the Post button so that empty messages can't be posted when the page loads. 
Outside the keyup event handler, add $('.btn').addClass('disabled');

var main = function(){
    $('.btn').click(function(){
        var post = $('.status-box').val();
        $('<li>').text(post).prependTo('.posts');
        $('.status-box').val('');
        $('.counter').text(140);
    });
    
    $('.status-box').keyup(function(){
        var postLength = $(this).val().length;
        var charactersLeft = 140 - postLength;
        $('.counter').text(charactersLeft);
        
        if(charactersLeft < 0){
            $('.btn').addClass('disabled');
        } else if(charactersLeft == 140){
            $('.btn').addClass('disabled');    
        } else {
            $('.btn').removeClass('disabled');
        }
    });
    
    $('.btn').addClass('disabled');
};

$(document).ready(main);



**********************************************************************************
Disable the button 2

The Post button is only enabled when at least one character is typed in the update box.
When you click Post, the update box is emptied. However, the button stays enabled. This needs to change!

Instructions:
To do this, add a line at the end of your click event handler where you:
Select the 'btn' class
Add the class 'disabled' using .addClass()
Press Save and submit. This will take you to the full preview page. 
The exercise will only pass if you post a message!

var main = function(){
    $('.btn').click(function(){
        var post = $('.status-box').val();
        $('<li>').text(post).prependTo('.posts');
        $('.status-box').val('');
        $('.counter').text(140);
        $('.btn').addClass('disabled');
    });
    
    $('.status-box').keyup(function(){
        var postLength = $(this).val().length;
        var charactersLeft = 140 - postLength;
        $('.counter').text(charactersLeft);
        
        if(charactersLeft < 0){
            $('.btn').addClass('disabled');
        } else if(charactersLeft == 140){
            $('.btn').addClass('disabled');    
        } else {
            $('.btn').removeClass('disabled');
        }
    });
    
    $('.btn').addClass('disabled');
};

$(document).ready(main);


Congratulations
Congratulations! You used jQuery events to build a status update tool.

You can type messages and post status updates
A counter keeps track of the number of characters left
The Post button is only enabled when there is a message that is 140 characters or less
Great work! Next let's learn more about how to use jQuery to create animated transitions.



********************************************************************************************************************